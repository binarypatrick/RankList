// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RankList.Data.Database;

#nullable disable

namespace RankList.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250216160638_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RankList.Web.Common.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("AverageRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("real");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(3800)
                        .IsUnicode(true)
                        .HasColumnType("character varying(3800)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("ItemId");

                    b.HasIndex("AverageRating");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.ItemTagMapping", b =>
                {
                    b.Property<Guid>("ItemTagMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemTagMappingId");

                    b.HasIndex("TagId");

                    b.HasIndex("ItemId", "TagId")
                        .IsUnique();

                    b.ToTable("ItemTagMappings");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2000)");

                    b.Property<float>("Rating")
                        .HasPrecision(4, 2)
                        .HasColumnType("real");

                    b.HasKey("ReviewId");

                    b.HasIndex("ItemId");

                    b.HasIndex("CreatedBy", "ItemId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasMaxLength(3800)
                        .IsUnicode(true)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("character varying(500)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Item", b =>
                {
                    b.HasOne("RankList.Web.Common.Models.User", "Creator")
                        .WithMany("Items")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.ItemTagMapping", b =>
                {
                    b.HasOne("RankList.Web.Common.Models.Item", "Item")
                        .WithMany("TagMappings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RankList.Web.Common.Models.Tag", "Tag")
                        .WithMany("ItemMappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Review", b =>
                {
                    b.HasOne("RankList.Web.Common.Models.User", "Creator")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RankList.Web.Common.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Item", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TagMappings");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.Tag", b =>
                {
                    b.Navigation("ItemMappings");
                });

            modelBuilder.Entity("RankList.Web.Common.Models.User", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
